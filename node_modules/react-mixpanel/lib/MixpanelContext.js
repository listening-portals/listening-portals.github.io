'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.MixpanelConsumer = exports.mixpanelShape = exports.MixpanelProvider = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MixpanelContext = _react2.default.createContext();
exports.default = MixpanelContext;


MixpanelContext.Provider.propTypes = {
	value: _propTypes2.default.shape({
		init: _propTypes2.default.func.isRequired,
		track: _propTypes2.default.func.isRequired
	})
};

var MixpanelProvider = exports.MixpanelProvider = function (_React$Component) {
	_inherits(MixpanelProvider, _React$Component);

	function MixpanelProvider() {
		_classCallCheck(this, MixpanelProvider);

		return _possibleConstructorReturn(this, (MixpanelProvider.__proto__ || Object.getPrototypeOf(MixpanelProvider)).apply(this, arguments));
	}

	_createClass(MixpanelProvider, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				MixpanelContext.Provider,
				{ value: this.props.mixpanel },
				this.props.children
			);
		}
	}]);

	return MixpanelProvider;
}(_react2.default.Component);

var mixpanelShape = exports.mixpanelShape = _propTypes2.default.shape({
	init: _propTypes2.default.func.isRequired,
	track: _propTypes2.default.func.isRequired,
	register: _propTypes2.default.func.isRequired,
	people: _propTypes2.default.object.isRequired
});

MixpanelProvider.propTypes = {
	children: _propTypes2.default.node.isRequired,
	mixpanel: mixpanelShape
};

var MixpanelConsumer = exports.MixpanelConsumer = MixpanelContext.Consumer;